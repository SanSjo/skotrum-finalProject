/*
import React, { useState } from 'react';
import MapboxGl from '@react-native-mapbox-gl/maps';
import { View, StyleSheet } from 'react-native';

const styles = {
  width: '100vw',
  height: 'calc(100vh - 80px)',
  position: 'absolute'
};

export const App = () => {
  const [map, setMap] = useState(null);
  const mapContainer = useRef(null);

  useEffect(() => {
    mapboxgl.setAccessToken(
      'pk.eyJ1Ijoic2Fuc2pvIiwiYSI6ImNrN2Fpbm5ncDAyMmgzbG1zd2MzMXh3ZWQifQ.5S_TRL8MWhIlV96anO7hXw'
    );
    const initializeMap = ({ setMap, mapContainer }) => {
      const map = new mapboxgl.Map({
        container: mapContainer.current,
        style: 'mapbox://styles/mapbox/streets-v11', // stylesheet location
        center: [0, 0],
        zoom: 5
      });

      map.on('load', () => {
        setMap(map);
        map.resize();
      });
    };

    if (!map) initializeMap({ setMap, mapContainer });
  }, [map]);

  return <div ref={el => (mapContainer.current = el)} style={styles} />;
};

export default App;




/*
//find location
componentWillMount(){
    if (Platform.OS === 'android' && !Constants.isDevice) {
      setErrMessage({
        errorMessage: 'Oops, this will not work on Sketch in an Android emulator. Try it on your device!',
      })
    } else {
      this._getLocationAsync();
    }
  }
  
  _getLocationAsync = async () => {
    let { status } = await Permissions.askAsync(Permissions.LOCATION);
    if (status !== 'granted') {
      setErrMessage({
        errorMessage: 'Permission to access location was denied',
      });
    }

    let location = await Location.getCurrentPositionAsync({});
   setLocation({ location });
  };



//find geolocation
const [error, setError] = useState('');
  const [position, setPosition] = useState({
    latitude: 0,
    longitude: 0
  });

  const getPosition = () => {
    Geolocation.getCurrentPosition(
      pos => {
        setError('');
        setPosition({
          latitude: pos.coords.latitude,
          longitude: pos.coords.longitude
        });
      },
      e => setError(e.message)
    );
  };
  //
import * as React from 'react';

import { useGoogleMaps } from 'react-hook-google-maps';

const App = () => {
  const { ref, map, google } = useGoogleMaps(
    // Use your own API key, you can get one from Google (https://console.cloud.google.com/google/maps-apis/overview)
    'AIzaSyA2yH7tLmWZaRERpDbp_SAwopGNU_cyg-Q',
    // NOTE: even if you change options later
    {
      center: { lat: 0, lng: 0 },
      zoom: 3
    }
  );
  console.log(map); // instance of created Map object (https://developers.google.com/maps/documentation/javascript/reference/map)
  console.log(google); // google API object (easily get google.maps.LatLng or google.maps.Marker or any other Google Maps class)
  return <div ref={ref} style={{ width: 400, height: 300 }} />;
};

export default App;
*/

/*

import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import MapView, { PROVIDER_GOOGLE, PROVIDER_DEFAULT } from 'react-native-maps';

export const App = () => {

  return (
    <View>
      <MapView
        style={{ flex: 1 }}
        provider={PROVIDER_GOOGLE}
        showsUserLocation
        initialRegion={{
          latitude: 37.78825,
          longitude: -122.4324,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421
        }}
      />
    </View>
  );
};

export default App




/*  <Map
        google={this.props.google}
        zoom={14}
        style={mapStyles}
        initialCenter={{
          lat: -1.2884,
          lng: 36.8233
        }}
      />

const mapStyles = {
  width: '100%',
  height: '100%'
};
      export default GoogleApiWrapper({
  apiKey:
    'https://maps.googleapis.com/maps/api/js?key=AIzaSyA2yH7tLmWZaRERpDbp_SAwopGNU_cyg-Q&callback=initMap'
})(App);
      */
